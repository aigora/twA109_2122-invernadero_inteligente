
#include <stdio.h>
#include <stdlib.h>
#include <string.h>
#include <locale.h>
#include <conio.h>
#include "SerialClass/SerialClass.h"
#define MAX_BUFFER 200
#define PAUSA_MS 200 
#define ON 1
#define OFF 0

int menu_ppal(void);
float leer_sensor_temperatura(Serial*);
float leer_sensor_humedad(Serial*);
float leer_sensor_luz(Serial*);
int Enviar_y_Recibir(Serial*, const char*, char*);
float float_from_cadena(char* cadena);



int main(void) {

	Serial* Arduino;
	char puerto[] = "COM6"; // Puerto serie al que está conectado Arduino
	int opcion_menu;
	int sensorluz, umbraluz = 0, luces;
	int sensorhumedad, umbralhumedad = 0, bomba;
	int sensortemp, umbraltemp = 0, ventilador;
	int opcion = 0;

	setlocale(LC_ALL, "es-ES");
	Arduino = new Serial((char*)puerto);

	printf("Selecciona para leer los datos de los sensores");
	printf("1 -> Sensor temperatura");
	printf("2 -> Sensor luminosidad");
	printf("3 -> Sensor humedad");

	opcion = menu_ppal();
	sensorluz = leer_sensor_luz(Arduino);
	sensorhumedad = leer_sensor_humedad(Arduino);
	sensortemp = leer_sensor_temperatura(Arduino);

	switch (opcion)
	{
	case 1:

		printf("\n Sensor temperatura: %d", sensortemp);
		break;

	case 2:
		printf("\n Sensor luz: %d", sensorluz);
		break;

	case 3:

		printf("\n Sensor humedad: %d", sensorhumedad);
		break;

	}

	return 0;
}
int menu_ppal(void)
{
	int opcion = 0;
	do
	{
		scanf_s("%d", &opcion);
		if (opcion < 1 || opcion > 3)
			printf("ERROR\n Introduzca otra opcion");
		else
			printf("Ha seleccionado la opcion %d", opcion);
	} while (opcion < 1 || opcion > 3);
	return opcion;
}

int Enviar_y_Recibir(Serial* Arduino, const char* mensaje_enviar, char* mensaje_recibir)
{
	int bytes_recibidos = 0, total = 0;
	int intentos = 0, fin_linea = 0;


	Arduino->WriteData((char*)mensaje_enviar, strlen(mensaje_enviar));
	Sleep(PAUSA_MS);

	bytes_recibidos = Arduino->ReadData(mensaje_recibir, sizeof(char) * MAX_BUFFER - 1);

	while ((bytes_recibidos > 0 || intentos < 5) && fin_linea == 0)
	{
		if (bytes_recibidos > 0)
		{
			total += bytes_recibidos;
			if (mensaje_recibir[total - 1] == 13 || mensaje_recibir[total - 1] == 10)
				fin_linea = 1;
		}
		else
			intentos++;
		Sleep(PAUSA_MS);
		bytes_recibidos = Arduino->ReadData(mensaje_recibir + total, sizeof(char) * MAX_BUFFER - 1);
	}
	if (total > 0)
		mensaje_recibir[total - 1] = '\0';

	//printf("LOG: %d bytes -> %s\nIntentos=%d - EOLN=%d\n", total, mensaje_recibir,intentos,fin_linea);
	return total;
}
float leer_sensor_temperatura(Serial* Arduino)
{
	float temperatura;
	int bytesRecibidos;
	char mensaje_recibido[MAX_BUFFER];

	bytesRecibidos = Enviar_y_Recibir(Arduino, "GET_TEMP\n", mensaje_recibido);

	if (bytesRecibidos <= 0)
		temperatura = -1;
	else
		temperatura = float_from_cadena(mensaje_recibido);
	return temperatura;
}
float leer_sensor_luz(Serial* Arduino)
{
	float luz;
	int bytesRecibidos;
	char mensaje_recibido[MAX_BUFFER];

	bytesRecibidos = Enviar_y_Recibir(Arduino, "GET_LUZ\n", mensaje_recibido);

	if (bytesRecibidos <= 0)
		luz = -1;
	else
		luz = float_from_cadena(mensaje_recibido);
	return luz;
}
float leer_sensor_humedad(Serial* Arduino)
{
	float humedad;
	int bytesRecibidos;
	char mensaje_recibido[MAX_BUFFER];

	bytesRecibidos = Enviar_y_Recibir(Arduino, "GET_HUM\n", mensaje_recibido);

	if (bytesRecibidos <= 0)
		humedad = -1;
	else
		humedad = float_from_cadena(mensaje_recibido);
	return humedad;
}
float float_from_cadena(char* cadena)
{
	float numero = 0;
	int i, divisor = 10, estado = 0;


	for (i = 0; cadena[i] != '\0' && estado != 3 && i < MAX_BUFFER; i++)
		switch (estado)
		{
		case 0:// Antes del número
			if (cadena[i] >= '0' && cadena[i] <= '9')
			{
				numero = cadena[i] - '0';
				estado = 1;
			}
			break;
		case 1:// Durante el número
			if (cadena[i] >= '0' && cadena[i] <= '9')
				numero = numero * 10 + cadena[i] - '0';
			else
				if (cadena[i] == '.' || cadena[i] == ',')
					estado = 2;
				else
					estado = 3;
			break;
		case 2: // Parte decimal
			if (cadena[i] >= '0' && cadena[i] <= '9')
			{
				numero = numero + (float)(cadena[i] - '0') / divisor;
				divisor *= 10;
			}
			else
				estado = 3;
			break;
		}
	return numero;
}
